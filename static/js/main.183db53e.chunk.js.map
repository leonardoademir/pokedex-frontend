{"version":3,"sources":["services/pokeapi.js","pages/main/index.js","pages/capture/index.js","routes.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","Main","state","captures","captureInfo","page","img","imgPokemons","loadCaptures","a","get","response","data","docs","setState","map","capture","pokemon","loadImage","n","length","responseInfo","push","sprites","front_default","prevPage","pageNumber","nextPage","pages","this","str","charAt","toUpperCase","slice","className","align","key","_id","Capitalize","moveList","move","id","capturedAt","disabled","onClick","to","style","padding","borderRadius","border","background","color","fontSize","fontWeight","cursor","Component","con","Capture","pokemons","selected_value","options","moves","loadPokemons","poke","value","label","handleChange","handleImageMoves","console","log","handleSubmit","alert","post","then","res","json","handleCaptureDate","shuffle","name","Container","width","onChange","autoFocus","Row","Col","Image","src","height","ListGroup","Item","Form","Group","Label","Control","size","justifyContent","required","type","placeholder","defaultValue","e","target","Feedback","Button","variant","marginLeft","dotenv","config","Routes","basename","process","exact","path","component","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.183db53e.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({ baseURL: 'https://pokedex-jacto-admission.herokuapp.com/api' });\n\nexport default api;\n","/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport api from '../../services/pokeapi'\nimport './styles.css'\nimport { Link, withRouter } from 'react-router-dom';\nimport {Row, Col, Image} from 'react-bootstrap';\nimport axios from 'axios';\n\n\nexport default class Main extends Component {\n  state = {\n    captures: [], \n    captureInfo: {},\n    page: 1,\n    img:[],\n    imgPokemons:[]\n  }\n  \n  componentDidMount(){\n    this.loadCaptures();\n    \n  }\n\n  loadCaptures = async(page = 1) => {\n    const response = await api.get(`/captures?page=${page}`);\n    \n    const { docs, ...captureInfo } = response.data;\n    \n\n    this.setState({captures: docs, captureInfo, page });\n\n    const imgPokemons = this.state.captures.map(capture=>capture.pokemon);\n    this.setState({imgPokemons});\n    \n    this.loadImage();\n    \n  };\n\n  Capitalize(str){\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  loadImage = async() => {\n    for(let n = 0; n <= this.state.imgPokemons.length; n++) {\n      const responseInfo = await axios.get(`https://pokeapi.co/api/v2/pokemon/${this.state.imgPokemons[n]}`);\n      this.state.img.push(responseInfo.data.sprites.front_default);\n    }\n  }\n\n\n  prevPage = () => {\n    const { page, captureInfo } = this.state;\n\n    if (page === 1) return;\n\n    const pageNumber = page - 1;\n\n    this.loadCaptures(pageNumber);\n  }\n\n\n\n  nextPage = () => {\n    const { page, captureInfo } = this.state;\n\n    if( page === captureInfo.pages) return;\n\n    const pageNumber = page + 1;\n\n    this.loadCaptures(pageNumber);\n  };\n\n  render(){\n    const { captures, page, captureInfo, img } = this.state;\n\n  return (\n      <div className=\"capture-list\">\n        <h1 align=\"center\">Captured Pokemons</h1>\n        \n        {captures.map(capture =>\n          <article key={capture._id}>\n           \n            <strong>{this.Capitalize(capture.pokemon)}</strong>\n            <p>{capture.moveList.map((move, id) => \n              <li key={id}>{this.Capitalize(move)}</li>)}\n            </p>\n            <p>Capturado em: {capture.capturedAt}</p>\n          </article>         \n          )}\n          <div className=\"actions\">\n            <button disabled={page === 1} onClick={this.prevPage}>\n              Previous\n            </button>\n              <Link to=\"/captures\" style={{\n                padding:\"10px\",\n                borderRadius:\"5px\",\n                border:\"0\",\n                background: \"#da552f\",\n                color: \"#fff\",\n                fontSize: \"16px\",\n                fontWeight: \"bold\",\n                cursor: \"pointer\"\n              }}>New Captures</Link>\n            <button disabled={page === captureInfo.pages}onClick={this.nextPage}>\n              Next\n            </button>\n          </div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport api from '../../services/pokeapi'\nimport Select from 'react-select';\nimport axios from 'axios'\nimport shuffle from 'shuffle-array'\nimport { Form, Button, Image, ListGroup, Container, Row, Col } from 'react-bootstrap'\nimport { Link } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst con = axios.create();\n\nexport default class Capture extends Component {\n  \n  state={\n    pokemons:[],\n    selected_value: \"\",\n    options: [],\n    img:\"\",\n    moves:[],\n    capturedAt:\"\"\n  }\n\n\n  componentDidMount(){\n    this.loadPokemons();\n  }\n\n  loadPokemons = async() => {\n    const response = await api.get(`/pokemons`);\n    \n    const pokemons = response.data;\n    let options = pokemons.map( poke => ({ value: poke, label: poke }));\n\n    this.setState({pokemons, options});\n    \n  };\n\n  handleChange = (selected_value) => {\n    this.handleImageMoves(selected_value);\n    console.log(selected_value.value);\n    this.setState({selected_value});\n  }\n\n  handleSubmit = async() => {\n    console.log(this.state.capturedAt)\n    if(this.state.capturedAt === '') {\n      \n      alert('Preencha a data e hora da captura');\n      return false;\n    }else{\n      await api.post('/captures',{\n        pokemon: this.state.selected_value.value,\n        capturedAt: this.state.capturedAt,\n        moveList: this.state.moves\n      }).then(res=>{\n        console.log(res.json)\n      })\n      alert('Salvou');\n    }\n  }\n\n  handleCaptureDate = (capturedAt) => {\n    this.setState({capturedAt});\n    console.log(this.state.capturedAt);\n  }\n\n  handleImageMoves = async(selected_value) => {\n    const responseInfo = await con.get(`https://pokeapi.co/api/v2/pokemon/${selected_value.value}`);\n    const img = responseInfo.data.sprites.front_default;\n    shuffle(responseInfo.data.moves);\n    const moves = responseInfo.data.moves.map((moves) => moves.move.name).slice(0, 4);\n    console.log({name: moves.map(move => move)})\n    this.setState({ img, moves });\n  }\n\n\n  render(){\n\n    return (   \n      <div className=\"container\">\n        \n        <Container style={{padding:\"10px\", width:\"240px\"}} align=\"center\">\n        \n          <Select\n            key={this.state.pokemons._id}\n            onChange={this.handleChange}\n            options={this.state.options}\n            autoFocus={true}\n          />\n        </Container>\n        <Container>\n          <Row>\n            <Col align=\"center\">\n              <h2 align=\"center\">Pokemon</h2>\n              <Image src={this.state.img} height=\"240px\" width=\"240px\"></Image>\n            </Col>\n            <Col>\n              <ListGroup>\n                <h2 align=\"center\">Moves</h2>\n                {this.state.moves.map((move, id) => <ListGroup.Item key={id} align=\"center\">{move}</ListGroup.Item>)}\n              </ListGroup>\n            </Col>\n          </Row>\n          \n        \n        <Form align=\"center\">\n            <Form.Group align=\"center\">\n              <Form.Label>Capture Date and time:</Form.Label>\n              <Form.Control size=\"lg\" style={{width:\"300px\", justifyContent:\"center\"}} required type=\"datetime-local\" placeholder=\"01/01/2020\" \n              defaultValue={this.state.capturedAt} onChange={e => this.handleCaptureDate(e.target.value)}/>\n              <Form.Control.Feedback type=\"invalid\">\n                Preencha a data e hora da captura.\n              </Form.Control.Feedback>\n            </Form.Group>\n            <>\n            <Button onClick={this.handleSubmit} style={{fontSize:\"20px\", width:\"140px\"}}type=\"button\" variant=\"warning\">Capture</Button>\n            <Link to='/' style={{\n                marginLeft:\"5px\",\n                padding:\"10px\",\n                width:\"140px\",\n                borderRadius:\"5px\",\n                border:\"0\",\n                background: \"#da552f\",\n                color: \"#fff\",\n                fontSize: \"20px\",\n                fontWeight: \"bold\",\n                cursor: \"pointer\"\n              }}>Listar Capturas</Link>\n          </>\n          </Form>\n          </Container>\n      </div>\n      \n    ) \n  }\n}\n\n","/* eslint-disable import/no-named-as-default-member */\n/* eslint-disable import/no-named-as-default */\nimport React from 'react';\nimport dotenv from 'dotenv';\n\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport Main from './pages/main';\nimport Capture from './pages/capture';\n\ndotenv.config();\n\nconst Routes = () => (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <Route exact path=\"/\" component={Main} />\n      <Route path=\"/captures\" component={Capture} />\n    </Switch>\n  </BrowserRouter>\n\n);\n\nexport default Routes;\n","import React from 'react';\nimport './styles.css';\n\nconst Header = () => <header id=\"main-header\">Minha PokeDex</header>;\n\nexport default Header;\n","import React from 'react';\nimport Routes from './routes';\n\nimport './styles.css';\n\nimport Header from './components/Header';\n\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n    <Routes />\n  </div>\n);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}