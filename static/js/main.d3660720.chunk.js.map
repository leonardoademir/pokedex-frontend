{"version":3,"sources":["services/pokeapi.js","pages/main/index.js","pages/capture/index.js","routes.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","Main","state","captures","captureInfo","page","img","loadCaptures","a","get","response","data","docs","setState","console","log","prevPage","pageNumber","nextPage","pages","this","str","charAt","toUpperCase","slice","className","align","map","capture","key","_id","Capitalize","pokemon","moveList","move","id","disabled","onClick","to","style","padding","borderRadius","border","background","color","fontSize","fontWeight","cursor","Component","con","Capture","pokemons","selected_value","options","value","label","moves","capturedAt","loadPokemons","poke","handleChange","handleImageMoves","handleSubmit","post","then","res","json","alert","handleCaptureDate","responseInfo","sprites","front_default","shuffle","name","Container","width","onChange","autoFocus","Row","Col","Image","src","height","ListGroup","Item","Form","Group","Label","Control","size","justifyContent","type","placeholder","defaultValue","e","target","Button","variant","marginLeft","dotenv","config","Routes","basename","process","exact","path","component","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d3660720.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({baseURL:'https://pokedex-jacto-admission.herokuapp.com/api'});\n\nexport default api;","/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport api from '../../services/pokeapi'\nimport './styles.css'\nimport { Link, withRouter } from 'react-router-dom';\nimport {Row, Col} from 'react-bootstrap';\n\n\nexport default class Main extends Component {\n  state = {\n    captures: [], \n    captureInfo: {},\n    page: 1,\n    img:[]\n  }\n  \n  componentDidMount(){\n    this.loadCaptures();\n  }\n\n  loadCaptures = async(page = 1) => {\n    const response = await api.get(`/captures?page=${page}`);\n    \n    const { docs, ...captureInfo } = response.data;\n\n    this.setState({captures: docs, captureInfo, page });\n    console.log(this.state.docs)\n  };\n\n  Capitalize(str){\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n/*\n  loadImage = async() => {\n    console.log(this.state.captures.map(capture=>\n      capture.pokemon));\n    const responseInfo = await axios.get(`https://pokeapi.co/api/v2/pokemon/${this.state.captures.map(capture=>\n    capture.pokemon)}`);\n    console.log(responseInfo)\n  }\n*/\n\n  prevPage = () => {\n    const { page, captureInfo } = this.state;\n\n    if (page === 1) return;\n\n    const pageNumber = page - 1;\n\n    this.loadCaptures(pageNumber)\n  }\n\n\n\n  nextPage = () => {\n    const { page, captureInfo } = this.state;\n\n    if( page === captureInfo.pages) return;\n\n    const pageNumber = page + 1;\n\n    this.loadCaptures(pageNumber);\n  };\n\n  render(){\n    const { captures, page, captureInfo } = this.state\n\n  return (\n      <div className=\"capture-list\">\n        <h1 align=\"center\">Captured Pokemons</h1>\n        {captures.map(capture =>\n          <article key={capture._id}>\n            <strong>{this.Capitalize(capture.pokemon)}</strong>\n            <p>{capture.moveList.map((move, id) => \n              <li key={id}>{this.Capitalize(move)}</li>)}\n            </p>\n          </article>         \n          )}\n          <div className=\"actions\">\n            <button disabled={page === 1} onClick={this.prevPage}>\n              Previous\n            </button>\n              <Link to=\"/captures\" style={{\n                padding:\"10px\",\n                borderRadius:\"5px\",\n                border:\"0\",\n                background: \"#da552f\",\n                color: \"#fff\",\n                fontSize: \"16px\",\n                fontWeight: \"bold\",\n                cursor: \"pointer\"\n              }}>New Captures</Link>\n            <button disabled={page === captureInfo.pages}onClick={this.nextPage}>\n              Next\n            </button>\n          </div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport api from '../../services/pokeapi'\nimport Select from 'react-select';\nimport axios from 'axios'\nimport shuffle from 'shuffle-array'\nimport { Form, Button, Image, ListGroup, Container, Row, Col } from 'react-bootstrap'\nimport { Link } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst con = axios.create();\n\nexport default class Capture extends Component {\n  \n  state={\n    pokemons:[],\n    selected_value: \"\",\n    options: [\n      { value: 'one', label: 'One' },\n      { value: 'two', label: 'Two' }\n  ],\n    img:\"\",\n    moves:[],\n    capturedAt:\"\"\n  }\n\n\n  componentDidMount(){\n    this.loadPokemons();\n  }\n\n  loadPokemons = async() => {\n    const response = await api.get(`/pokemons`);\n    \n    const pokemons = response.data;\n    let options = pokemons.map( poke => ({ value: poke, label: poke }));\n\n    console.log(pokemons);\n    this.setState({pokemons, options});\n    \n  };\n\n  handleChange = (selected_value) => {\n    this.handleImageMoves(selected_value);\n    console.log(selected_value.value)\n    this.setState({selected_value})\n    \n  }\n\n  handleSubmit = async() => {\n    await api.post('/captures',{\n      pokemon: this.state.selected_value.value,\n      capturedAt: this.state.capturedAt,\n      moveList: this.state.moves\n    }).then(res=>{\n      console.log(res.json)\n    })\n    alert('Salvou')\n\n  }\n\n  handleCaptureDate = (capturedAt) => {\n    this.setState({capturedAt});\n    console.log(this.state.capturedAt);\n  }\n\n  handleImageMoves = async(selected_value) => {\n    const responseInfo = await con.get(`https://pokeapi.co/api/v2/pokemon/${selected_value.value}`);\n    const img = responseInfo.data.sprites.front_default;\n    shuffle(responseInfo.data.moves);\n    const moves = responseInfo.data.moves.map((moves) => moves.move.name).slice(0, 4);\n    console.log({name: moves.map(move => move)})\n    this.setState({ img, moves });\n  }\n\n\n  render(){\n\n    return (   \n      <div className=\"container\">\n        \n        <Container style={{padding:\"10px\", width:\"240px\"}} align=\"center\">\n        \n          <Select\n            key={this.state.pokemons._id}\n            onChange={this.handleChange}\n            options={this.state.options}\n            autoFocus={true}\n          />\n        </Container>\n        <Container>\n          <Row>\n            <Col align=\"center\">\n              <h2 align=\"center\">Pokemon</h2>\n              <Image src={this.state.img} height=\"240px\" width=\"240px\"></Image>\n            </Col>\n            <Col>\n              <ListGroup>\n                <h2 align=\"center\">Moves</h2>\n                {this.state.moves.map((move, id) => <ListGroup.Item key={id} align=\"center\">{move}</ListGroup.Item>)}\n              </ListGroup>\n            </Col>\n          </Row>\n          \n        \n        <Form align=\"center\">\n            <Form.Group align=\"center\">\n              <Form.Label>Capture Date and time:</Form.Label>\n              <Form.Control size=\"lg\" style={{width:\"300px\", justifyContent:\"center\"}}type=\"datetime-local\" placeholder=\"01/01/2020\" \n              defaultValue={this.state.capturedAt} onChange={e => this.handleCaptureDate(e.target.value)}/>\n            </Form.Group>\n            <>\n            <Button  onClick={this.handleSubmit} style={{fontSize:\"20px\", width:\"140px\"}}type=\"button\" variant=\"warning\">Capture</Button>\n            <Link to='/' style={{\n                marginLeft:\"5px\",\n                padding:\"10px\",\n                width:\"140px\",\n                borderRadius:\"5px\",\n                border:\"0\",\n                background: \"#da552f\",\n                color: \"#fff\",\n                fontSize: \"20px\",\n                fontWeight: \"bold\",\n                cursor: \"pointer\"\n              }}>Listar Capturas</Link>\n          </>\n          </Form>\n          </Container>\n      </div>\n      \n    ) \n  }\n}\n\n","import React from 'react';\nimport dotenv from 'dotenv'\n\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport Main from './pages/main';\nimport Capture from './pages/capture';\n\ndotenv.config();\n\nconst Routes = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path='/' component={Main}/>\n        <Route path='/captures' component={Capture}/>\n      </Switch>\n    </BrowserRouter>\n  \n);\n\nexport default Routes;\n\n","import React from 'react';\nimport './styles.css'\n\nconst Header = () => <header id=\"main-header\">Minha PokeDex</header>;\n\nexport default Header;","import React from 'react';\nimport Routes from './routes';\n\nimport './styles.css';\n\nimport Header from './components/Header'\n\nconst App = () => (\n  <div className=\"App\">\n    <Header/>\n    <Routes/>\n  </div>\n);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}